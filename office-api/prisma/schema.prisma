// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URI")
}

model Office {
  id                 String   @id @default(uuid())
  name               String
  owner_email        String
  owner_phone_number String?
  logo               String?  @db.VarChar(4096)
  created_at         DateTime @default(now())

  clients    Client[]
  employees  Employee[]
  categories Category[]
  steps      Step[]
}

model Client {
  id           String    @id @default(uuid())
  office_id    String
  name         String
  email        String
  password     String
  phone_number String?
  logo         String?   @db.VarChar(4096)
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime?

  office   Office    @relation(fields: [office_id], references: [id])
  projects Project[]
}

model Role {
  id         String   @id @default(uuid())
  label      String
  created_at DateTime @default(now())

  employees Employee[]
}

model Employee {
  id           String    @id @default(uuid())
  office_id    String
  role_id      String
  name         String
  email        String
  password     String
  phone_number String?
  avatar       String?   @db.VarChar(4096)
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime?

  office        Office        @relation(fields: [office_id], references: [id])
  role          Role          @relation(fields: [role_id], references: [id])
  project_files ProjectFile[]
  ProjectStep   ProjectStep[]
}

model Category {
  id         String   @id @default(uuid())
  name       String
  office_id  String?
  created_at DateTime @default(now())

  office        Office?       @relation(fields: [office_id], references: [id])
  project_files ProjectFile[]
}

model Project {
  id         String    @id @default(uuid())
  client_id  String
  name       String
  updated_at DateTime?
  created_at DateTime  @default(now())

  client        Client        @relation(fields: [client_id], references: [id])
  files         ProjectFile[]
  project_steps ProjectStep[]
}

model ProjectFile {
  id            String    @id @default(uuid())
  project_id    String
  category_id   String?
  created_by_id String
  path          String?   @db.VarChar(4096)
  name          String?
  created_at    DateTime  @default(now())
  updated_at    DateTime?

  project    Project   @relation(fields: [project_id], references: [id])
  created_by Employee  @relation(fields: [created_by_id], references: [id])
  category   Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
}

model Step {
  id         String   @id @default(uuid())
  office_id  String
  name       String
  created_at DateTime @default(now())

  office      Office        @relation(fields: [office_id], references: [id])
  ProjectStep ProjectStep[]
}

model ProjectStep {
  id              String    @id @default(uuid())
  project_id      String
  step_id         String
  assigned_to     String?
  start_date      DateTime?
  end_date        DateTime?
  status          String
  step_hours      Int?
  last_updated_at DateTime?
  last_updated_by String?

  project  Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  step     Step      @relation(fields: [step_id], references: [id], onDelete: Cascade)
  assigned Employee? @relation(fields: [assigned_to], references: [id], onDelete: SetNull)

  @@unique([project_id, step_id])
}
